Terminals which are not used

   TOKEN_ERROR


State 53 conflicts: 6 shift/reduce, 2 reduce/reduce
State 91 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: var_dec ';' program
    2        | function program
    3        | /* empty */

    4 var_dec: datatype TK_IDENTIFIER ':' literal
    5        | datatype TK_IDENTIFIER '[' LIT_INTEGER ']' ':' literal_list
    6        | datatype TK_IDENTIFIER '[' LIT_INTEGER ']'

    7 function: datatype TK_IDENTIFIER '(' params ')' block

    8 params: datatype TK_IDENTIFIER ',' params
    9       | datatype TK_IDENTIFIER

   10 block: '{' commandlist '}'

   11 commandlist: command ';' commandlist
   12            | command ';'

   13 command: KW_PRINT print_param_list
   14        | KW_READ TK_IDENTIFIER
   15        | KW_RETURN expr
   16        | ifelse
   17        | forloop

   18 print_param_list: expr print_param_list
   19                 | LIT_STRING print_param_list
   20                 | expr
   21                 | LIT_STRING

   22 expr: value
   23     | value operator value

   24 value: literal
   25      | TK_IDENTIFIER
   26      | TK_IDENTIFIER '[' value ']'
   27      | TK_IDENTIFIER '(' value_list ')'

   28 value_list: value value_list
   29           | /* empty */

   30 operator: OPERATOR_LE
   31         | OPERATOR_GE
   32         | OPERATOR_EQ
   33         | OPERATOR_NE
   34         | OPERATOR_AND
   35         | OPERATOR_OR
   36         | '*'
   37         | '/'
   38         | '-'
   39         | '+'
   40         | '<'
   41         | '>'

   42 ifelse: KW_IF '(' expr ')' KW_THEN command
   43       | KW_IF '(' expr ')' KW_THEN command KW_ELSE command

   44 forloop: KW_FOR '(' expr ')'

   45 command: KW_FOR '(' TK_IDENTIFIER '=' expr 'TO' expr ')' command

   46 literal: LIT_INTEGER
   47        | LIT_FALSE
   48        | LIT_TRUE
   49        | LIT_CHAR
   50        | LIT_STRING

   51 datatype: KW_INT
   52         | KW_FLOAT
   53         | KW_BOOL
   54         | KW_CHAR

   55 literal_list: literal
   56             | literal literal_list


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7 27 42 43 44 45
')' (41) 7 27 42 43 44 45
'*' (42) 36
'+' (43) 39
',' (44) 8
'-' (45) 38
'/' (47) 37
':' (58) 4 5
';' (59) 1 11 12
'<' (60) 40
'=' (61) 45
'>' (62) 41
'TO' (84) 45
'[' (91) 5 6 26
']' (93) 5 6 26
'{' (123) 10
'}' (125) 10
error (256)
KW_INT (258) 51
KW_FLOAT (259) 52
KW_BOOL (260) 53
KW_CHAR (261) 54
KW_IF (262) 42 43
KW_THEN (263) 42 43
KW_ELSE (264) 43
KW_FOR (265) 44 45
KW_READ (266) 14
KW_RETURN (267) 15
KW_PRINT (268) 13
OPERATOR_LE (269) 30
OPERATOR_GE (270) 31
OPERATOR_EQ (271) 32
OPERATOR_NE (272) 33
OPERATOR_AND (273) 34
OPERATOR_OR (274) 35
TK_IDENTIFIER (275) 4 5 6 7 8 9 14 25 26 27 45
LIT_INTEGER (276) 5 6 46
LIT_FALSE (277) 47
LIT_TRUE (278) 48
LIT_CHAR (279) 49
LIT_STRING (280) 19 21 50
TOKEN_ERROR (281)


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
program (45)
    on left: 1 2 3, on right: 0 1 2
var_dec (46)
    on left: 4 5 6, on right: 1
function (47)
    on left: 7, on right: 2
params (48)
    on left: 8 9, on right: 7 8
block (49)
    on left: 10, on right: 7
commandlist (50)
    on left: 11 12, on right: 10 11
command (51)
    on left: 13 14 15 16 17 45, on right: 11 12 42 43 45
print_param_list (52)
    on left: 18 19 20 21, on right: 13 18 19
expr (53)
    on left: 22 23, on right: 15 18 20 42 43 44 45
value (54)
    on left: 24 25 26 27, on right: 22 23 26 28
value_list (55)
    on left: 28 29, on right: 27 28
operator (56)
    on left: 30 31 32 33 34 35 36 37 38 39 40 41, on right: 23
ifelse (57)
    on left: 42 43, on right: 16
forloop (58)
    on left: 44, on right: 17
literal (59)
    on left: 46 47 48 49 50, on right: 4 24 55 56
datatype (60)
    on left: 51 52 53 54, on right: 4 5 6 7 8 9
literal_list (61)
    on left: 55 56, on right: 5 56


state 0

    0 $accept: . program $end

    KW_INT    shift, and go to state 1
    KW_FLOAT  shift, and go to state 2
    KW_BOOL   shift, and go to state 3
    KW_CHAR   shift, and go to state 4

    $default  reduce using rule 3 (program)

    program   go to state 5
    var_dec   go to state 6
    function  go to state 7
    datatype  go to state 8


state 1

   51 datatype: KW_INT .

    $default  reduce using rule 51 (datatype)


state 2

   52 datatype: KW_FLOAT .

    $default  reduce using rule 52 (datatype)


state 3

   53 datatype: KW_BOOL .

    $default  reduce using rule 53 (datatype)


state 4

   54 datatype: KW_CHAR .

    $default  reduce using rule 54 (datatype)


state 5

    0 $accept: program . $end

    $end  shift, and go to state 9


state 6

    1 program: var_dec . ';' program

    ';'  shift, and go to state 10


state 7

    2 program: function . program

    KW_INT    shift, and go to state 1
    KW_FLOAT  shift, and go to state 2
    KW_BOOL   shift, and go to state 3
    KW_CHAR   shift, and go to state 4

    $default  reduce using rule 3 (program)

    program   go to state 11
    var_dec   go to state 6
    function  go to state 7
    datatype  go to state 8


state 8

    4 var_dec: datatype . TK_IDENTIFIER ':' literal
    5        | datatype . TK_IDENTIFIER '[' LIT_INTEGER ']' ':' literal_list
    6        | datatype . TK_IDENTIFIER '[' LIT_INTEGER ']'
    7 function: datatype . TK_IDENTIFIER '(' params ')' block

    TK_IDENTIFIER  shift, and go to state 12


state 9

    0 $accept: program $end .

    $default  accept


state 10

    1 program: var_dec ';' . program

    KW_INT    shift, and go to state 1
    KW_FLOAT  shift, and go to state 2
    KW_BOOL   shift, and go to state 3
    KW_CHAR   shift, and go to state 4

    $default  reduce using rule 3 (program)

    program   go to state 13
    var_dec   go to state 6
    function  go to state 7
    datatype  go to state 8


state 11

    2 program: function program .

    $default  reduce using rule 2 (program)


state 12

    4 var_dec: datatype TK_IDENTIFIER . ':' literal
    5        | datatype TK_IDENTIFIER . '[' LIT_INTEGER ']' ':' literal_list
    6        | datatype TK_IDENTIFIER . '[' LIT_INTEGER ']'
    7 function: datatype TK_IDENTIFIER . '(' params ')' block

    ':'  shift, and go to state 14
    '['  shift, and go to state 15
    '('  shift, and go to state 16


state 13

    1 program: var_dec ';' program .

    $default  reduce using rule 1 (program)


state 14

    4 var_dec: datatype TK_IDENTIFIER ':' . literal

    LIT_INTEGER  shift, and go to state 17
    LIT_FALSE    shift, and go to state 18
    LIT_TRUE     shift, and go to state 19
    LIT_CHAR     shift, and go to state 20
    LIT_STRING   shift, and go to state 21

    literal  go to state 22


state 15

    5 var_dec: datatype TK_IDENTIFIER '[' . LIT_INTEGER ']' ':' literal_list
    6        | datatype TK_IDENTIFIER '[' . LIT_INTEGER ']'

    LIT_INTEGER  shift, and go to state 23


state 16

    7 function: datatype TK_IDENTIFIER '(' . params ')' block

    KW_INT    shift, and go to state 1
    KW_FLOAT  shift, and go to state 2
    KW_BOOL   shift, and go to state 3
    KW_CHAR   shift, and go to state 4

    params    go to state 24
    datatype  go to state 25


state 17

   46 literal: LIT_INTEGER .

    $default  reduce using rule 46 (literal)


state 18

   47 literal: LIT_FALSE .

    $default  reduce using rule 47 (literal)


state 19

   48 literal: LIT_TRUE .

    $default  reduce using rule 48 (literal)


state 20

   49 literal: LIT_CHAR .

    $default  reduce using rule 49 (literal)


state 21

   50 literal: LIT_STRING .

    $default  reduce using rule 50 (literal)


state 22

    4 var_dec: datatype TK_IDENTIFIER ':' literal .

    $default  reduce using rule 4 (var_dec)


state 23

    5 var_dec: datatype TK_IDENTIFIER '[' LIT_INTEGER . ']' ':' literal_list
    6        | datatype TK_IDENTIFIER '[' LIT_INTEGER . ']'

    ']'  shift, and go to state 26


state 24

    7 function: datatype TK_IDENTIFIER '(' params . ')' block

    ')'  shift, and go to state 27


state 25

    8 params: datatype . TK_IDENTIFIER ',' params
    9       | datatype . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 28


state 26

    5 var_dec: datatype TK_IDENTIFIER '[' LIT_INTEGER ']' . ':' literal_list
    6        | datatype TK_IDENTIFIER '[' LIT_INTEGER ']' .

    ':'  shift, and go to state 29

    $default  reduce using rule 6 (var_dec)


state 27

    7 function: datatype TK_IDENTIFIER '(' params ')' . block

    '{'  shift, and go to state 30

    block  go to state 31


state 28

    8 params: datatype TK_IDENTIFIER . ',' params
    9       | datatype TK_IDENTIFIER .

    ','  shift, and go to state 32

    $default  reduce using rule 9 (params)


state 29

    5 var_dec: datatype TK_IDENTIFIER '[' LIT_INTEGER ']' ':' . literal_list

    LIT_INTEGER  shift, and go to state 17
    LIT_FALSE    shift, and go to state 18
    LIT_TRUE     shift, and go to state 19
    LIT_CHAR     shift, and go to state 20
    LIT_STRING   shift, and go to state 21

    literal       go to state 33
    literal_list  go to state 34


state 30

   10 block: '{' . commandlist '}'

    KW_IF      shift, and go to state 35
    KW_FOR     shift, and go to state 36
    KW_READ    shift, and go to state 37
    KW_RETURN  shift, and go to state 38
    KW_PRINT   shift, and go to state 39

    commandlist  go to state 40
    command      go to state 41
    ifelse       go to state 42
    forloop      go to state 43


state 31

    7 function: datatype TK_IDENTIFIER '(' params ')' block .

    $default  reduce using rule 7 (function)


state 32

    8 params: datatype TK_IDENTIFIER ',' . params

    KW_INT    shift, and go to state 1
    KW_FLOAT  shift, and go to state 2
    KW_BOOL   shift, and go to state 3
    KW_CHAR   shift, and go to state 4

    params    go to state 44
    datatype  go to state 25


state 33

   55 literal_list: literal .
   56             | literal . literal_list

    LIT_INTEGER  shift, and go to state 17
    LIT_FALSE    shift, and go to state 18
    LIT_TRUE     shift, and go to state 19
    LIT_CHAR     shift, and go to state 20
    LIT_STRING   shift, and go to state 21

    $default  reduce using rule 55 (literal_list)

    literal       go to state 33
    literal_list  go to state 45


state 34

    5 var_dec: datatype TK_IDENTIFIER '[' LIT_INTEGER ']' ':' literal_list .

    $default  reduce using rule 5 (var_dec)


state 35

   42 ifelse: KW_IF . '(' expr ')' KW_THEN command
   43       | KW_IF . '(' expr ')' KW_THEN command KW_ELSE command

    '('  shift, and go to state 46


state 36

   44 forloop: KW_FOR . '(' expr ')'
   45 command: KW_FOR . '(' TK_IDENTIFIER '=' expr 'TO' expr ')' command

    '('  shift, and go to state 47


state 37

   14 command: KW_READ . TK_IDENTIFIER

    TK_IDENTIFIER  shift, and go to state 48


state 38

   15 command: KW_RETURN . expr

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 21

    expr     go to state 50
    value    go to state 51
    literal  go to state 52


state 39

   13 command: KW_PRINT . print_param_list

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 53

    print_param_list  go to state 54
    expr              go to state 55
    value             go to state 51
    literal           go to state 52


state 40

   10 block: '{' commandlist . '}'

    '}'  shift, and go to state 56


state 41

   11 commandlist: command . ';' commandlist
   12            | command . ';'

    ';'  shift, and go to state 57


state 42

   16 command: ifelse .

    $default  reduce using rule 16 (command)


state 43

   17 command: forloop .

    $default  reduce using rule 17 (command)


state 44

    8 params: datatype TK_IDENTIFIER ',' params .

    $default  reduce using rule 8 (params)


state 45

   56 literal_list: literal literal_list .

    $default  reduce using rule 56 (literal_list)


state 46

   42 ifelse: KW_IF '(' . expr ')' KW_THEN command
   43       | KW_IF '(' . expr ')' KW_THEN command KW_ELSE command

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 21

    expr     go to state 58
    value    go to state 51
    literal  go to state 52


state 47

   44 forloop: KW_FOR '(' . expr ')'
   45 command: KW_FOR '(' . TK_IDENTIFIER '=' expr 'TO' expr ')' command

    TK_IDENTIFIER  shift, and go to state 59
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 21

    expr     go to state 60
    value    go to state 51
    literal  go to state 52


state 48

   14 command: KW_READ TK_IDENTIFIER .

    $default  reduce using rule 14 (command)


state 49

   25 value: TK_IDENTIFIER .
   26      | TK_IDENTIFIER . '[' value ']'
   27      | TK_IDENTIFIER . '(' value_list ')'

    '['  shift, and go to state 61
    '('  shift, and go to state 62

    $default  reduce using rule 25 (value)


state 50

   15 command: KW_RETURN expr .

    $default  reduce using rule 15 (command)


state 51

   22 expr: value .
   23     | value . operator value

    OPERATOR_LE   shift, and go to state 63
    OPERATOR_GE   shift, and go to state 64
    OPERATOR_EQ   shift, and go to state 65
    OPERATOR_NE   shift, and go to state 66
    OPERATOR_AND  shift, and go to state 67
    OPERATOR_OR   shift, and go to state 68
    '*'           shift, and go to state 69
    '/'           shift, and go to state 70
    '-'           shift, and go to state 71
    '+'           shift, and go to state 72
    '<'           shift, and go to state 73
    '>'           shift, and go to state 74

    $default  reduce using rule 22 (expr)

    operator  go to state 75


state 52

   24 value: literal .

    $default  reduce using rule 24 (value)


state 53

   19 print_param_list: LIT_STRING . print_param_list
   21                 | LIT_STRING .
   50 literal: LIT_STRING .

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 53

    KW_ELSE        reduce using rule 21 (print_param_list)
    KW_ELSE        [reduce using rule 50 (literal)]
    TK_IDENTIFIER  [reduce using rule 50 (literal)]
    LIT_INTEGER    [reduce using rule 50 (literal)]
    LIT_FALSE      [reduce using rule 50 (literal)]
    LIT_TRUE       [reduce using rule 50 (literal)]
    LIT_CHAR       [reduce using rule 50 (literal)]
    LIT_STRING     [reduce using rule 50 (literal)]
    ';'            reduce using rule 21 (print_param_list)
    ';'            [reduce using rule 50 (literal)]
    $default       reduce using rule 50 (literal)

    print_param_list  go to state 76
    expr              go to state 55
    value             go to state 51
    literal           go to state 52


state 54

   13 command: KW_PRINT print_param_list .

    $default  reduce using rule 13 (command)


state 55

   18 print_param_list: expr . print_param_list
   20                 | expr .

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 53

    $default  reduce using rule 20 (print_param_list)

    print_param_list  go to state 77
    expr              go to state 55
    value             go to state 51
    literal           go to state 52


state 56

   10 block: '{' commandlist '}' .

    $default  reduce using rule 10 (block)


state 57

   11 commandlist: command ';' . commandlist
   12            | command ';' .

    KW_IF      shift, and go to state 35
    KW_FOR     shift, and go to state 36
    KW_READ    shift, and go to state 37
    KW_RETURN  shift, and go to state 38
    KW_PRINT   shift, and go to state 39

    $default  reduce using rule 12 (commandlist)

    commandlist  go to state 78
    command      go to state 41
    ifelse       go to state 42
    forloop      go to state 43


state 58

   42 ifelse: KW_IF '(' expr . ')' KW_THEN command
   43       | KW_IF '(' expr . ')' KW_THEN command KW_ELSE command

    ')'  shift, and go to state 79


state 59

   25 value: TK_IDENTIFIER .
   26      | TK_IDENTIFIER . '[' value ']'
   27      | TK_IDENTIFIER . '(' value_list ')'
   45 command: KW_FOR '(' TK_IDENTIFIER . '=' expr 'TO' expr ')' command

    '['  shift, and go to state 61
    '('  shift, and go to state 62
    '='  shift, and go to state 80

    $default  reduce using rule 25 (value)


state 60

   44 forloop: KW_FOR '(' expr . ')'

    ')'  shift, and go to state 81


state 61

   26 value: TK_IDENTIFIER '[' . value ']'

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 21

    value    go to state 82
    literal  go to state 52


state 62

   27 value: TK_IDENTIFIER '(' . value_list ')'

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 21

    $default  reduce using rule 29 (value_list)

    value       go to state 83
    value_list  go to state 84
    literal     go to state 52


state 63

   30 operator: OPERATOR_LE .

    $default  reduce using rule 30 (operator)


state 64

   31 operator: OPERATOR_GE .

    $default  reduce using rule 31 (operator)


state 65

   32 operator: OPERATOR_EQ .

    $default  reduce using rule 32 (operator)


state 66

   33 operator: OPERATOR_NE .

    $default  reduce using rule 33 (operator)


state 67

   34 operator: OPERATOR_AND .

    $default  reduce using rule 34 (operator)


state 68

   35 operator: OPERATOR_OR .

    $default  reduce using rule 35 (operator)


state 69

   36 operator: '*' .

    $default  reduce using rule 36 (operator)


state 70

   37 operator: '/' .

    $default  reduce using rule 37 (operator)


state 71

   38 operator: '-' .

    $default  reduce using rule 38 (operator)


state 72

   39 operator: '+' .

    $default  reduce using rule 39 (operator)


state 73

   40 operator: '<' .

    $default  reduce using rule 40 (operator)


state 74

   41 operator: '>' .

    $default  reduce using rule 41 (operator)


state 75

   23 expr: value operator . value

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 21

    value    go to state 85
    literal  go to state 52


state 76

   19 print_param_list: LIT_STRING print_param_list .

    $default  reduce using rule 19 (print_param_list)


state 77

   18 print_param_list: expr print_param_list .

    $default  reduce using rule 18 (print_param_list)


state 78

   11 commandlist: command ';' commandlist .

    $default  reduce using rule 11 (commandlist)


state 79

   42 ifelse: KW_IF '(' expr ')' . KW_THEN command
   43       | KW_IF '(' expr ')' . KW_THEN command KW_ELSE command

    KW_THEN  shift, and go to state 86


state 80

   45 command: KW_FOR '(' TK_IDENTIFIER '=' . expr 'TO' expr ')' command

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 21

    expr     go to state 87
    value    go to state 51
    literal  go to state 52


state 81

   44 forloop: KW_FOR '(' expr ')' .

    $default  reduce using rule 44 (forloop)


state 82

   26 value: TK_IDENTIFIER '[' value . ']'

    ']'  shift, and go to state 88


state 83

   28 value_list: value . value_list

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 21

    $default  reduce using rule 29 (value_list)

    value       go to state 83
    value_list  go to state 89
    literal     go to state 52


state 84

   27 value: TK_IDENTIFIER '(' value_list . ')'

    ')'  shift, and go to state 90


state 85

   23 expr: value operator value .

    $default  reduce using rule 23 (expr)


state 86

   42 ifelse: KW_IF '(' expr ')' KW_THEN . command
   43       | KW_IF '(' expr ')' KW_THEN . command KW_ELSE command

    KW_IF      shift, and go to state 35
    KW_FOR     shift, and go to state 36
    KW_READ    shift, and go to state 37
    KW_RETURN  shift, and go to state 38
    KW_PRINT   shift, and go to state 39

    command  go to state 91
    ifelse   go to state 42
    forloop  go to state 43


state 87

   45 command: KW_FOR '(' TK_IDENTIFIER '=' expr . 'TO' expr ')' command

    'TO'  shift, and go to state 92


state 88

   26 value: TK_IDENTIFIER '[' value ']' .

    $default  reduce using rule 26 (value)


state 89

   28 value_list: value value_list .

    $default  reduce using rule 28 (value_list)


state 90

   27 value: TK_IDENTIFIER '(' value_list ')' .

    $default  reduce using rule 27 (value)


state 91

   42 ifelse: KW_IF '(' expr ')' KW_THEN command .
   43       | KW_IF '(' expr ')' KW_THEN command . KW_ELSE command

    KW_ELSE  shift, and go to state 93

    KW_ELSE   [reduce using rule 42 (ifelse)]
    $default  reduce using rule 42 (ifelse)


state 92

   45 command: KW_FOR '(' TK_IDENTIFIER '=' expr 'TO' . expr ')' command

    TK_IDENTIFIER  shift, and go to state 49
    LIT_INTEGER    shift, and go to state 17
    LIT_FALSE      shift, and go to state 18
    LIT_TRUE       shift, and go to state 19
    LIT_CHAR       shift, and go to state 20
    LIT_STRING     shift, and go to state 21

    expr     go to state 94
    value    go to state 51
    literal  go to state 52


state 93

   43 ifelse: KW_IF '(' expr ')' KW_THEN command KW_ELSE . command

    KW_IF      shift, and go to state 35
    KW_FOR     shift, and go to state 36
    KW_READ    shift, and go to state 37
    KW_RETURN  shift, and go to state 38
    KW_PRINT   shift, and go to state 39

    command  go to state 95
    ifelse   go to state 42
    forloop  go to state 43


state 94

   45 command: KW_FOR '(' TK_IDENTIFIER '=' expr 'TO' expr . ')' command

    ')'  shift, and go to state 96


state 95

   43 ifelse: KW_IF '(' expr ')' KW_THEN command KW_ELSE command .

    $default  reduce using rule 43 (ifelse)


state 96

   45 command: KW_FOR '(' TK_IDENTIFIER '=' expr 'TO' expr ')' . command

    KW_IF      shift, and go to state 35
    KW_FOR     shift, and go to state 36
    KW_READ    shift, and go to state 37
    KW_RETURN  shift, and go to state 38
    KW_PRINT   shift, and go to state 39

    command  go to state 97
    ifelse   go to state 42
    forloop  go to state 43


state 97

   45 command: KW_FOR '(' TK_IDENTIFIER '=' expr 'TO' expr ')' command .

    $default  reduce using rule 45 (command)
